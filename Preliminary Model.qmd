---
title: "Preliminary Model"
format: html
editor: visual
---

# Part 1: Loading and Cleaning Data

```{r, include=FALSE}
library(dplyr)
library(tidyverse)
library(readr)
library(janitor)
library(lubridate)
library(randomForest)
```

```{r}
flight_2023 <- read_csv("T_ONTIME_REPORTING_2023.csv")
flight_2023 <- clean_names(flight_2023)
flight_2023 <- flight_2023[, !(names(flight_2023) %in% c("origin_state_abr", "dest_state_abr"))]
```

```{r}
flight_2024 <- read_csv("T_ONTIME_REPORTING 4.csv")
flight_2024 <- clean_names(flight_2024)
```

```{r time2023}
# Define a function to format the time columns
convert_time_column <- function(flight_data, column_name) {
  formatted_times <- sprintf("%04s", flight_data[[column_name]])
  formatted_times <- paste0(substr(formatted_times, 1, 2), ":", substr(formatted_times, 3, 4))
  flight_data[[column_name]] <- as.POSIXct(formatted_times, format = "%H:%M")
  flight_data[[column_name]] <- format(flight_data[[column_name]], "%H:%M")
  return(flight_data)
}

# List the columns to convert
time_columns <- c("dep_time", "arr_time", "crs_dep_time", "crs_arr_time") # Add more columns if necessary

# Loop through the columns and apply the conversion
for (column in time_columns) {
  flight_2023 <- convert_time_column(flight_2023, column)
}
# Convert date
flight_2023$fl_date <- as.POSIXct(flight_2023$fl_date, format = "%m/%d/%Y %I:%M:%S %p")
flight_2023$fl_date <- format(flight_2023$fl_date, "%m/%d/%Y")
```

logistic (if delay over 15 minutes), KNN (delay reasons), Tree (delay reason)

```{r filter-top-2023}
# top 10 origin airport
top10origin <- flight_2023 |> 
  group_by(origin) |>
  summarize(count = n()) |>
  arrange(desc(count)) |>
  head(10)

# top 5 carrier
top5carrier <- flight_2023 |> 
  group_by(op_unique_carrier) |>
  summarize(count = n()) |>
  arrange(desc(count)) |>
  head(5)

summary(flight_2023)
flight_2023 <- flight_2023 |> 
  filter(!is.na(dep_delay) & !is.na(arr_delay))

flight_2023_filtered <- flight_2023 |>
  filter(origin %in% top10origin$origin) |>
  filter(op_unique_carrier %in% top5carrier$op_unique_carrier)


flight_2023_filtered<- flight_2023_filtered |>
  mutate(dep_hour_planned =str_extract(flight_2023_filtered$crs_dep_time, "[0-9]{2}"),
         dep_period = ifelse(dep_hour_planned %in% c("06", "07", "08", "09", "10", "11"), "morning", 
                             ifelse(dep_hour_planned %in% c("12", "13", "14", "15","16", "17"), "afternoon",
                                    ifelse(dep_hour_planned %in% c("18", "19", "20", "21", "22", "23"), "night", "midnight"))))
```

```{r time2024}
# Loop through the columns and apply the conversion
for (column in time_columns) {
  flight_2024 <- convert_time_column(flight_2024, column)
}
# Convert date
flight_2024$fl_date <- as.POSIXct(flight_2024$fl_date, format = "%m/%d/%Y %I:%M:%S %p")
flight_2024$fl_date <- format(flight_2024$fl_date, "%m/%d/%Y")
```

logistic (if delay over 15 minutes), KNN (delay reasons), Tree (delay reason)

```{r filter-top-2024}
flight_2024 <- flight_2024 |> 
  filter(!is.na(dep_delay) & !is.na(arr_delay))

flight_2024_filtered <- flight_2024 |>
  filter(origin %in% top10origin$origin) |>
  filter(op_unique_carrier %in% top5carrier$op_unique_carrier)


flight_2024_filtered<- flight_2024_filtered |>
  mutate(dep_hour_planned =str_extract(flight_2024_filtered$crs_dep_time, "[0-9]{2}"),
         dep_period = ifelse(dep_hour_planned %in% c("06", "07", "08", "09", "10", "11"), "morning", 
                             ifelse(dep_hour_planned %in% c("12", "13", "14", "15","16", "17"), "afternoon",
                                    ifelse(dep_hour_planned %in% c("18", "19", "20", "21", "22", "23"), "night", "midnight"))))
```

```{r test-subset-2024}
set.seed(1)  # for reproducibility
n_2024 <- nrow(flight_2024_filtered)
test_indices <- sample(1:n_2024, size = 0.3 * n_2024)

test <- flight_2024_filtered[test_indices, ]
```

```{r delay-reason-clean-2023}
flight_cleaned23 <- flight_2023_filtered |>
  filter(!is.na(carrier_delay) | !is.na(weather_delay) | !is.na(nas_delay) | 
         !is.na(security_delay) | !is.na(late_aircraft_delay)) |>
mutate(delay_reason = case_when(
    !is.na(carrier_delay) & carrier_delay > 0 ~ "Carrier",
    !is.na(weather_delay) & weather_delay > 0 ~ "Weather",
    !is.na(nas_delay) & nas_delay > 0 ~ "NAS",
    !is.na(security_delay) & security_delay > 0 ~ "Security",
    !is.na(late_aircraft_delay) & late_aircraft_delay > 0 ~ "Late Aircraft",
    TRUE ~ "Unknown"
  )) 

```

```{r delay-reason-clean-2024}
test <- test |>
  filter(!is.na(carrier_delay) | !is.na(weather_delay) | !is.na(nas_delay) | 
         !is.na(security_delay) | !is.na(late_aircraft_delay)) |>
mutate(delay_reason = case_when(
    !is.na(carrier_delay) & carrier_delay > 0 ~ "Carrier",
    !is.na(weather_delay) & weather_delay > 0 ~ "Weather",
    !is.na(nas_delay) & nas_delay > 0 ~ "NAS",
    !is.na(security_delay) & security_delay > 0 ~ "Security",
    !is.na(late_aircraft_delay) & late_aircraft_delay > 0 ~ "Late Aircraft",
    TRUE ~ "Unknown"
  )) 

```

# Part 2: Model fitting

```{r logistic}
#Logistic
fit.glm <- glm(dep_del15 ~ origin + op_unique_carrier + distance + dep_period, family = "binomial", flight_2023_filtered)
summary(fit.glm)
```

```{r random-forest-delay-reasons}
set.seed(1)

# carrier and non-carrier delay reasons
flight_cleaned23 <- flight_cleaned23 |>
  mutate(delay_reason_binary = ifelse(delay_reason %in% "Carrier", 1, 0))

test <- test |>
  mutate(delay_reason_binary = ifelse(delay_reason %in% "Carrier", 1, 0))

flight_cleaned23$delay_reason_binary <- as.factor(flight_cleaned23$delay_reason_binary)

test$delay_reason_binary <- as.factor(test$delay_reason_binary)

rf_delay <- randomForest(delay_reason_binary ~ op_unique_carrier + origin + distance + dep_period, data = flight_cleaned23, mtry = 2, ntree = 500)
yhat.rf <- predict(rf_delay, newdata = test)
mean(yhat.rf == test$delay_reason_binary) # MSE 58.31%
rf_delay
importance(rf_delay)
varImpPlot (rf_delay)
```

```{r}
attach(flight_2023_filtered)
train <- flight_cleaned23
set.seed(42)  # for reproducibility
n_2024 <- nrow(test)
test_indices <- sample(1:n_2024, size = 0.3 * n_2024)

test1 <- test[test_indices, ] 
dim(test)
test1.delay <- test1$dep_del15
glm.probs <- predict(fit.glm, newdata = test1, type = "response")
glm.pred <- ifelse(glm.probs > 0.5, 1, 0)
mean(glm.pred == test1$dep_del15)
# Does not work well
```

```{r}
#Random Forest
train$dep_del15 <- factor(train$dep_del15, levels = c(0, 1))
test1$dep_del15 <- factor(test1$dep_del15, levels = c(0, 1))

rf.fit <- randomForest(dep_del15 ~ origin + op_unique_carrier + distance + delay_reason,
                         data = train, 
                         importance = TRUE, 
                         ntree = 500)
rf_preds <- predict(rf.fit, newdata = test1, type = "response")
summary(rf_preds)
# Confusion matrix to evaluate performance
confusion_matrix <- table(predicted = rf_preds, actual = test1$dep_del15)
print(confusion_matrix)
mean(rf_preds == test1$dep_del15)
```

```{r}
#Random Forest for delay reason
train$delay_reason <- factor(train$delay_reason)
test1$delay_reason <- factor(test1$delay_reason, levels = levels(train$delay_reason))

rf.fit_reason <- randomForest(delay_reason ~ origin + op_unique_carrier + distance + dep_period,
                         data = train, 
                         importance = TRUE, 
                         ntree = 500)
rf_preds_reason <- predict(rf.fit_reason, newdata = test1, type = "response")

# Confusion matrix to evaluate performance
confusion_matrix <- table(predicted = rf_preds, actual = test1$dep_del15)
print(confusion_matrix)
mean(rf_preds_reason == test1$delay_reason)

```


